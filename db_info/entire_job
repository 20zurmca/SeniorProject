--Entire Job


--Create tables for roster data aggregation and copy in data

CREATE TABLE roster_data (Roster_Year INT, Player_Number VARCHAR(10), First_Name VARCHAR(50), Last_Name VARCHAR(50),  Year VARCHAR(10), Position1 VARCHAR(20), Position2 VARCHAR(20), Position3 VARCHAR(10), Height VARCHAR(10), Weight INT, Home_Town VARCHAR(30), State_or_Country VARCHAR(20), High_School VARCHAR(100), Alternative_School VARCHAR(50), College VARCHAR(50), College_League VARCHAR(50), Bio_Link VARCHAR(100));

\COPY roster_data FROM 'roster_data.csv' DELIMITER ',' CSV HEADER;

CREATE TABLE starter_data(Roster_Year INT, Number INT, First_Name VARCHAR(50), Last_Name VARCHAR(50), Potential_Starts INT, GP INT, GS INT, Is_Starter VARCHAR(1), College VARCHAR(50));

\COPY starter_data FROM 'starter_data.csv' DELIMITER ',' CSV HEADER;

CREATE TABLE accolade_data(Roster_Year INT, First_Name VARCHAR(50), Last_Name VARCHAR(50), Accolade VARCHAR(20), College VARCHAR(50));

\COPY accolade_data FROM 'accolades.csv' DELIMITER ',' CSV HEADER;



--Create table for high school data and copy in the data

CREATE TABLE high_school_data (City VARCHAR(30), Institution VARCHAR(100), "State/Province" VARCHAR(20), Country VARCHAR(50), Latitude DOUBLE PRECISION, Longitude DOUBLE PRECISION, "Public/Private/International" VARCHAR(20));

\COPY high_school_data FROM 'high_school_data.csv' DELIMITER ',' CSV HEADER;

UPDATE high_school_data SET Institution = LOWER(Institution);


--Join with starter data

CREATE TABLE roster_starter_data AS (
	SELECT roster_data.Roster_Year, roster_data.Player_Number, roster_data.First_Name, roster_data.Last_Name, roster_data.Year, roster_data.Position1, roster_data.Position2, roster_data.Position3, roster_data.Height, roster_data.Weight, roster_data.Home_Town, roster_data.State_or_Country, roster_data.High_School, roster_data.Alternative_School, roster_data.College, roster_data.College_League, roster_data.Bio_Link, starter_data.Potential_Starts, starter_data.GP, starter_data.GS, starter_data.Is_Starter
	FROM roster_data
	LEFT JOIN starter_data
	ON roster_data.First_Name=starter_data.First_Name AND roster_data.Last_Name=starter_data.Last_Name AND roster_data.Roster_Year=starter_data.Roster_Year AND roster_data.College=starter_data.College
);


--Join with accolade data

CREATE TABLE roster_master_data AS (
	SELECT roster_starter_data.Roster_Year, roster_starter_data.Player_Number, roster_starter_data.First_Name, roster_starter_data.Last_Name, roster_starter_data.Year, roster_starter_data.Position1, roster_starter_data.Position2, roster_starter_data.Position3, roster_starter_data.Height, roster_starter_data.Weight, roster_starter_data.Home_Town, roster_starter_data.State_or_Country, roster_starter_data.High_School, roster_starter_data.Alternative_School, roster_starter_data.College, roster_starter_data.College_League, roster_starter_data.Bio_Link, roster_starter_data.Potential_Starts, roster_starter_data.GP, roster_starter_data.GS, roster_starter_data.Is_Starter, accolade_data.Accolade
	FROM roster_starter_data
	LEFT JOIN accolade_data
	ON roster_starter_data.First_Name=accolade_data.First_Name AND roster_starter_data.Last_Name=accolade_data.Last_Name AND roster_starter_data.Roster_Year=accolade_data.Roster_Year AND roster_starter_data.College=accolade_data.College
);


--Delete rows from original tables and the extra table
DELETE FROM roster_data;
DELETE FROM starter_data;
DELETE FROM accolade_data;
DROP TABLE roster_starter_data;


--Drop unneeded columns
ALTER TABLE roster_master_data DROP COLUMN Position2;
ALTER TABLE roster_master_data DROP COLUMN Position3;
ALTER TABLE roster_master_data DROP COLUMN Potential_Starts;
ALTER TABLE roster_master_data DROP COLUMN GP;
ALTER TABLE roster_master_data DROP COLUMN GS;


-- Drop those entires with a null high school and alternative school

DELETE FROM roster_master_data
WHERE High_School IS NULL AND Alternative_School IS NULL;


-- Matching Operations

--Guaranteed matched Public School data

CREATE TABLE roster_public_school1 AS (
	SELECT *
	FROM roster_master_data
	JOIN high_school_data
	ON high_school_data."Public/Private/International" = 'PUBLIC' AND (
		LOWER(roster_master_data.High_School) = LOWER(high_school_data.Institution)
	) AND (
		LOWER(high_school_data."State/Province") = LOWER(roster_master_data.State_or_Country)
	)
);

DELETE FROM roster_public_school1
USING (
	SELECT Institution, "State/Province", COUNT(Institution)
	FROM high_school_data
	GROUP BY Institution, "State/Province"
	HAVING high_school_data.count > 1
) AS temp1
WHERE LOWER(roster_public_school1.Institution) = LOWER(temp1.Institution) AND LOWER(roster_public_school1."State/Province") = LOWER(temp1."State/Province")
;

CREATE TABLE roster_public_school2 AS (
	SELECT *
	FROM roster_master_data
	JOIN high_school_data
	ON high_school_data."Public/Private/International" = 'PUBLIC' AND (
		LOWER(roster_master_data.High_School) = LOWER(high_school_data.Institution)
	) AND (
		LOWER(high_school_data."State/Province") = LOWER(roster_master_data.State_or_Country)
	) AND (
		LOWER(roster_master_data.Home_Town) = LOWER(high_school_data.City)
	)
);

CREATE TABLE roster_public_final AS (
	SELECT *
	FROM roster_public_school1
	UNION
	SELECT *
	FROM
	roster_public_school2
);


DROP TABLE roster_public_school1;
DROP TABLE roster_public_school2;


--Guaranteed matched International School data

CREATE TABLE roster_international_school1 AS (
	SELECT *
	FROM roster_master_data
	JOIN high_school_data
	ON high_school_data."Public/Private/International" = 'INTERNATIONAL' AND (
		LOWER(roster_master_data.High_School) = LOWER(high_school_data.Institution)
	) AND (
		LOWER(high_school_data.Country) = LOWER(roster_master_data.State_or_Country)
	)
);

DELETE FROM roster_international_school1
USING (
	SELECT Institution, Country, COUNT(Institution)
	FROM high_school_data
	GROUP BY Institution, Country
	HAVING high_school_data.count > 1
) AS temp1
WHERE LOWER(roster_international_school1.Institution) = LOWER(temp1.Institution) AND LOWER(roster_international_school1.Country) = LOWER(temp1.Country)
;

CREATE TABLE roster_international_school2 AS (
	SELECT *
	FROM roster_master_data
	JOIN high_school_data
	ON high_school_data."Public/Private/International" = 'INTERNATIONAL' AND (
		LOWER(roster_master_data.High_School) = LOWER(high_school_data.Institution)
	) AND (
		LOWER(high_school_data.Country) = LOWER(roster_master_data.State_or_Country)
	) AND (
		LOWER(roster_master_data.Home_Town) = LOWER(high_school_data.City)
	)
);

CREATE TABLE roster_international_final AS (
	SELECT *
	FROM roster_international_school1
	UNION
	SELECT *
	FROM
	roster_international_school2
);


DROP TABLE roster_international_school1;
DROP TABLE roster_international_school2;


-- Unique School Names

CREATE TABLE roster_unique_final AS (
	SELECT *
	FROM roster_master_data
	JOIN high_school_data
	ON LOWER(roster_master_data.High_School) = LOWER(high_school_data.Institution) AND (LOWER(high_school_data."State/Province") = LOWER(roster_master_data.State_or_Country)
	OR LOWER(high_school_data.Country) = LOWER(roster_master_data.State_or_Country))
);

DELETE FROM roster_unique_final
USING (
	SELECT Institution, COUNT(Institution)
	FROM high_school_data
	GROUP BY Institution
	HAVING high_school_data.count > 1
) AS temp1
WHERE LOWER(roster_unique_final.Institution) = LOWER(temp1.Institution)
;


-- Union all tables

CREATE TABLE highschool_match_master AS (
	SELECT *
	FROM roster_unique_final
	UNION
	SELECT *
	FROM (
		SELECT *
		FROM roster_public_final
		UNION
		SELECT *
		FROM roster_international_final
	) AS temp1
);

-- Drop all extra tables
DROP TABLE roster_public_final;
DROP TABLE roster_international_final;
DROP TABLE roster_unique_final;
DROP TABLE roster_master_data;


-- Group entries

CREATE TABLE grouped_data AS (
	select first_name, last_name, home_town, state_or_country, high_school, alternative_school, college, college_league, MAX("Public/Private/International") AS "Public/Private/International", COUNT(is_starter = 'Y') AS starter_count, COUNT(accolade) AS accolade_count, MAX(latitude) AS latitude, MAX(longitude) AS longitude, ARRAY_AGG(roster_year) AS roster_year, ARRAY_AGG(year) AS year, ARRAY_AGG(position1) AS position, ARRAY_AGG(height) AS height, ARRAY_AGG(weight) AS weight, ARRAY_AGG(bio_link) AS bio_link
	FROM highschool_match_master
	GROUP BY first_name, last_name, home_town, state_or_country, high_school, alternative_school, college, college_league
);


-- Add all ids to tables
ALTER TABLE high_school_data ADD COLUMN id SERIAL PRIMARY KEY;
ALTER TABLE grouped_data ADD COLUMN id SERIAL PRIMARY KEY;
ALTER TABLE highschool_match_master ADD COLUMN id SERIAL PRIMARY KEY;


-- Table and trigger for document tracking

CREATE TABLE documents (id SERIAL PRIMARY KEY, description VARCHAR(255), document VARCHAR(50), uploaded_at TIMESTAMP);

CREATE OR REPLACE FUNCTION update_db_func() RETURNS TRIGGER AS $$
	BEGIN

		-- Drop ids to avoid conflict when joining tables
		ALTER TABLE highschool_match_master DROP COLUMN id;
		ALTER TABLE high_school_data DROP COLUMN id;


		--Join with starter data

		CREATE TABLE roster_starter_data AS (
			SELECT roster_data.Roster_Year, roster_data.Player_Number, roster_data.First_Name, roster_data.Last_Name, roster_data.Year, roster_data.Position1, roster_data.Position2, roster_data.Position3, roster_data.Height, roster_data.Weight, roster_data.Home_Town, roster_data.State_or_Country, roster_data.High_School, roster_data.Alternative_School, roster_data.College, roster_data.College_League, roster_data.Bio_Link, starter_data.Potential_Starts, starter_data.GP, starter_data.GS, starter_data.Is_Starter
			FROM roster_data
			LEFT JOIN starter_data
			ON roster_data.First_Name=starter_data.First_Name AND roster_data.Last_Name=starter_data.Last_Name AND roster_data.Roster_Year=starter_data.Roster_Year AND roster_data.College=starter_data.College
		);


		--Join with accolade data

		CREATE TABLE roster_master_data AS (
			SELECT roster_starter_data.Roster_Year, roster_starter_data.Player_Number, roster_starter_data.First_Name, roster_starter_data.Last_Name, roster_starter_data.Year, roster_starter_data.Position1, roster_starter_data.Position2, roster_starter_data.Position3, roster_starter_data.Height, roster_starter_data.Weight, roster_starter_data.Home_Town, roster_starter_data.State_or_Country, roster_starter_data.High_School, roster_starter_data.Alternative_School, roster_starter_data.College, roster_starter_data.College_League, roster_starter_data.Bio_Link, roster_starter_data.Potential_Starts, roster_starter_data.GP, roster_starter_data.GS, roster_starter_data.Is_Starter, accolade_data.Accolade
			FROM roster_starter_data
			LEFT JOIN accolade_data
			ON roster_starter_data.First_Name=accolade_data.First_Name AND roster_starter_data.Last_Name=accolade_data.Last_Name AND roster_starter_data.Roster_Year=accolade_data.Roster_Year AND roster_starter_data.College=accolade_data.College
		);


		--Delete rows from original tables and the extra table
		DELETE FROM roster_data;
		DELETE FROM starter_data;
		DELETE FROM accolade_data;
		DROP TABLE roster_starter_data;


		--Drop unneeded columns
		ALTER TABLE roster_master_data DROP COLUMN Position2;
		ALTER TABLE roster_master_data DROP COLUMN Position3;
		ALTER TABLE roster_master_data DROP COLUMN Potential_Starts;
		ALTER TABLE roster_master_data DROP COLUMN GP;
		ALTER TABLE roster_master_data DROP COLUMN GS;


		-- Drop those entires with a null high school and alternative school

		DELETE FROM roster_master_data
		WHERE High_School IS NULL AND Alternative_School IS NULL;


		-- Matching Operations
		--Guaranteed matched Public School data

		CREATE TABLE roster_public_school1 AS (
			SELECT *
			FROM roster_master_data
			JOIN high_school_data
			ON high_school_data."Public/Private/International" = 'PUBLIC' AND (
				LOWER(roster_master_data.High_School) = LOWER(high_school_data.Institution)
			) AND (
				LOWER(high_school_data."State/Province") = LOWER(roster_master_data.State_or_Country)
			)
		);

		DELETE FROM roster_public_school1
		USING (
			SELECT Institution, "State/Province", COUNT(Institution)
			FROM high_school_data
			GROUP BY Institution, "State/Province"
			HAVING high_school_data.count > 1
		) AS temp1
		WHERE LOWER(roster_public_school1.Institution) = LOWER(temp1.Institution) AND LOWER(roster_public_school1."State/Province") = LOWER(temp1."State/Province")
		;

		CREATE TABLE roster_public_school2 AS (
			SELECT *
			FROM roster_master_data
			JOIN high_school_data
			ON high_school_data."Public/Private/International" = 'PUBLIC' AND (
				LOWER(roster_master_data.High_School) = LOWER(high_school_data.Institution)
			) AND (
				LOWER(high_school_data."State/Province") = LOWER(roster_master_data.State_or_Country)
			) AND (
				LOWER(roster_master_data.Home_Town) = LOWER(high_school_data.City)
			)
		);

		CREATE TABLE roster_public_final AS (
			SELECT *
			FROM roster_public_school1
			UNION
			SELECT *
			FROM
			roster_public_school2
		);

		DROP TABLE roster_public_school1;
		DROP TABLE roster_public_school2;


		--Guaranteed matched International School data

		CREATE TABLE roster_international_school1 AS (
			SELECT *
			FROM roster_master_data
			JOIN high_school_data
			ON high_school_data."Public/Private/International" = 'INTERNATIONAL' AND (
				LOWER(roster_master_data.High_School) = LOWER(high_school_data.Institution)
			) AND (
				LOWER(high_school_data.Country) = LOWER(roster_master_data.State_or_Country)
			)
		);

		DELETE FROM roster_international_school1
		USING (
			SELECT Institution, Country, COUNT(Institution)
			FROM high_school_data
			GROUP BY Institution, Country
			HAVING high_school_data.count > 1
		) AS temp1
		WHERE LOWER(roster_international_school1.Institution) = LOWER(temp1.Institution) AND LOWER(roster_international_school1.Country) = LOWER(temp1.Country)
		;

		CREATE TABLE roster_international_school2 AS (
			SELECT *
			FROM roster_master_data
			JOIN high_school_data
			ON high_school_data."Public/Private/International" = 'INTERNATIONAL' AND (
				LOWER(roster_master_data.High_School) = LOWER(high_school_data.Institution)
			) AND (
				LOWER(high_school_data.Country) = LOWER(roster_master_data.State_or_Country)
			) AND (
				LOWER(roster_master_data.Home_Town) = LOWER(high_school_data.City)
			)
		);

		CREATE TABLE roster_international_final AS (
			SELECT *
			FROM roster_international_school1
			UNION
			SELECT *
			FROM
			roster_international_school2
		);


		DROP TABLE roster_international_school1;
		DROP TABLE roster_international_school2;


		-- Unique School Names

		CREATE TABLE roster_unique_final AS (
			SELECT *
			FROM roster_master_data
			JOIN high_school_data
			ON LOWER(roster_master_data.High_School) = LOWER(high_school_data.Institution) AND (LOWER(high_school_data."State/Province") = LOWER(roster_master_data.State_or_Country)
			OR LOWER(high_school_data.Country) = LOWER(roster_master_data.State_or_Country))
		);

		DELETE FROM roster_unique_final
		USING (
			SELECT Institution, COUNT(Institution)
			FROM high_school_data
			GROUP BY Institution
			HAVING high_school_data.count > 1
		) AS temp1
		WHERE LOWER(roster_unique_final.Institution) = LOWER(temp1.Institution)
		;


		-- Union all tables
		CREATE TABLE new_highschool_match_master AS (
			SELECT *
			FROM roster_unique_final
			UNION
			SELECT *
			FROM (
				SELECT *
				FROM roster_public_final
				UNION
				SELECT *
				FROM roster_international_final
			) AS temp1
		);

		-- Drop all extra tables
		DROP TABLE roster_public_final;
		DROP TABLE roster_international_final;
		DROP TABLE roster_unique_final;
		DROP TABLE roster_master_data;


		-- Union the new and old high school match master data

		CREATE TABLE highschool_match_master3 AS (
			SELECT *
			FROM highschool_match_master
			UNION
			SELECT *
			FROM new_highschool_match_master
		);

		-- Drop old and new table but not the combined one (3)
		DROP TABLE highschool_match_master;
		DROP TABLE new_highschool_match_master;

		ALTER TABLE highschool_match_master3 RENAME TO highschool_match_master;


		-- Group entries

		-- Drop old table
		DROP TABLE grouped_data;

		CREATE TABLE grouped_data AS (
			select first_name, last_name, home_town, state_or_country, high_school, alternative_school, college, college_league, MAX("Public/Private/International") AS "Public/Private/International", COUNT(is_starter = 'Y') AS starter_count, COUNT(accolade) AS accolade_count, MAX(latitude) AS latitude, MAX(longitude) AS longitude, ARRAY_AGG(roster_year) AS roster_year, ARRAY_AGG(year) AS year, ARRAY_AGG(position1) AS position, ARRAY_AGG(height) AS height, ARRAY_AGG(weight) AS weight, ARRAY_AGG(bio_link) AS bio_link
			FROM highschool_match_master
			GROUP BY first_name, last_name, home_town, state_or_country, high_school, alternative_school, college, college_league
		);


		-- Add all ids to tables
		ALTER TABLE high_school_data ADD COLUMN id SERIAL PRIMARY KEY;
		ALTER TABLE grouped_data ADD COLUMN id SERIAL PRIMARY KEY;
		ALTER TABLE highschool_match_master ADD COLUMN id SERIAL PRIMARY KEY;

		RETURN NEW;
	END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_db AFTER INSERT ON documents FOR EACH ROW EXECUTE PROCEDURE update_db_func();




-- \COPY starter_data FROM 'new_starter_data.csv' DELIMITER ',' CSV HEADER;
-- \COPY roster_data FROM 'new_roster_data.csv' DELIMITER ',' CSV HEADER;
-- \COPY accolade_data FROM 'new_accolades.csv' DELIMITER ',' CSV HEADER;
-- \Copy grouped_data to 'grouped_data.csv' DELIMITER ',' CSV HEADER;
-- INSERT INTO documents (description, document) VALUES ('hi', 'doc 1');
